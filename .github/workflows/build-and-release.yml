name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (without v prefix)"
        required: true
        default: "5.4.5"

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        include:
          # BepInEx versions
          - project: XUnity.AutoTranslator.Plugin.BepInEx
            target: net40
            output-name: XUnity.AutoTranslator-BepInEx
            config: Release
          - project: XUnity.AutoTranslator.Plugin.BepInEx-IL2CPP
            target: net6.0
            output-name: XUnity.AutoTranslator-BepInEx-IL2CPP
            config: Release
          # Developer versions
          - project: XUnity.AutoTranslator.Plugin.Core
            target: net35
            output-name: XUnity.AutoTranslator-Developer
            config: Release
          - project: XUnity.AutoTranslator.Plugin.Core
            target: net6.0
            output-name: XUnity.AutoTranslator-Developer-IL2CPP
            config: Release
          # Other injectors
          - project: XUnity.AutoTranslator.Plugin.IPA
            target: net35
            output-name: XUnity.AutoTranslator-IPA
            config: Release
          - project: XUnity.AutoTranslator.Plugin.MelonMod
            target: net35
            output-name: XUnity.AutoTranslator-MelonMod
            config: Release
          - project: XUnity.AutoTranslator.Plugin.UnityInjector
            target: net35
            output-name: XUnity.AutoTranslator-UnityInjector
            config: Release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Install .NET Framework 3.5 Developer Pack
        if: matrix.target == 'net35'
        run: |
          $net35Installed = Get-WindowsOptionalFeature -Online -FeatureName NetFx3 -ErrorAction SilentlyContinue
          if ($net35Installed -and $net35Installed.State -eq "Enabled") {
            Write-Host ".NET Framework 3.5 is already installed"
          } else {
            Write-Host "Enabling .NET Framework 3.5..."
            Enable-WindowsOptionalFeature -Online -FeatureName NetFx3 -All -NoRestart
            Write-Host ".NET Framework 3.5 enabled successfully"
          }

      - name: Restore all solution dependencies
        run: dotnet restore XUnity.AutoTranslator.sln

      - name: Build project
        run: |
          $targetFramework = "${{ matrix.target }}"
          # 关键修复：同时传递 PostBuildEvent="" 和 NoWarn=NU1702
          # PostBuildEvent="" 强制禁用构建后事件，解决 XCOPY 错误
          # NoWarn=NU1702 忽略跨框架引用警告，解决构建取消问题
          dotnet build src/${{ matrix.project }}/${{ matrix.project }}.csproj `
            --configuration ${{ matrix.config }} `
            --framework $targetFramework `
            --no-restore `
            -p:Version=${{ github.event.inputs.version || '5.4.5' }} /p:PostBuildEvent="" /p:NoWarn=NU1702

      - name: Copy build outputs
        run: |
          $outputDir = "dist/${{ matrix.output-name }}"
          New-Item -ItemType Directory -Force -Path $outputDir
          Copy-Item "src/${{ matrix.project }}/bin/${{ matrix.config }}/${{ matrix.target }}/*.dll" $outputDir -ErrorAction SilentlyContinue
          Copy-Item "src/${{ matrix.project }}/bin/${{ matrix.config }}/${{ matrix.target }}/*.pdb" $outputDir -ErrorAction SilentlyContinue
          Copy-Item "src/${{ matrix.project }}/bin/${{ matrix.config }}/${{ matrix.target }}/*.xml" $outputDir -ErrorAction SilentlyContinue
          if ("${{ matrix.project }}" -match "BepInEx") {
            # 显式地重新构建所有依赖项，确保它们在正确的输出目录中可用，并传递修复参数
            dotnet build src/XUnity.Common/XUnity.Common.csproj --configuration Release --framework ${{ matrix.target }} /p:PostBuildEvent="" /p:NoWarn=NU1702
            dotnet build src/XUnity.ResourceRedirector/XUnity.ResourceRedirector.csproj --configuration Release --framework ${{ matrix.target }} /p:PostBuildEvent="" /p:NoWarn=NU1702
            dotnet build src/XUnity.AutoTranslator.Plugin.Core/XUnity.AutoTranslator.Plugin.Core.csproj --configuration Release --framework ${{ matrix.target }} /p:PostBuildEvent="" /p:NoWarn=NU1702
            # ExtProtocol 不会被 net6.0 引用，所以它不需要 NoWarn 参数
            dotnet build src/XUnity.AutoTranslator.Plugin.ExtProtocol/XUnity.AutoTranslator.Plugin.ExtProtocol.csproj --configuration Release --framework net35 /p:PostBuildEvent=""
            
            Copy-Item "src/XUnity.Common/bin/Release/${{ matrix.target }}/XUnity.Common.dll" $outputDir -ErrorAction SilentlyContinue
            Copy-Item "src/XUnity.ResourceRedirector/bin/Release/${{ matrix.target }}/XUnity.ResourceRedirector.dll" $outputDir -ErrorAction SilentlyContinue
            Copy-Item "src/XUnity.AutoTranslator.Plugin.Core/bin/Release/${{ matrix.target }}/XUnity.AutoTranslator.Plugin.Core.dll" $outputDir -ErrorAction SilentlyContinue
            Copy-Item "src/XUnity.AutoTranslator.Plugin.ExtProtocol/bin/Release/net35/XUnity.AutoTranslator.Plugin.ExtProtocol.dll" $outputDir -ErrorAction SilentlyContinue
            
            $bepInExDir = "$outputDir/BepInEx"
            New-Item -ItemType Directory -Force -Path "$bepInExDir/core" -ErrorAction SilentlyContinue
            New-Item -ItemType Directory -Force -Path "$bepInExDir/plugins/XUnity.AutoTranslator" -ErrorAction SilentlyContinue
            New-Item -ItemType Directory -Force -Path "$bepInExDir/plugins/XUnity.ResourceRedirector" -ErrorAction SilentlyContinue
            
            Copy-Item "$outputDir/XUnity.Common.dll" "$bepInExDir/core/" -ErrorAction SilentlyContinue
            Copy-Item "$outputDir/XUnity.ResourceRedirector.dll" "$bepInExDir/plugins/XUnity.ResourceRedirector/" -ErrorAction SilentlyContinue
            Copy-Item "$outputDir/*.dll" "$bepInExDir/plugins/XUnity.AutoTranslator/" -ErrorAction SilentlyContinue
            Copy-Item "$outputDir/*.pdb" "$bepInExDir/plugins/XUnity.AutoTranslator/" -ErrorAction SilentlyContinue
            
            Copy-Item "libs/BepInEx 5.0/BepInEx.dll" "$bepInExDir/plugins/XUnity.AutoTranslator/" -ErrorAction SilentlyContinue
            Copy-Item "libs/ExIni.dll" "$bepInExDir/plugins/XUnity.AutoTranslator/" -ErrorAction SilentlyContinue
          }

      - name: Create ZIP archive
        run: |
          $version = "${{ github.event.inputs.version || '5.4.5' }}"
          $zipName = "${{ matrix.output-name }}-${version}.zip"
          $sourceDir = "dist/${{ matrix.output-name }}"
          if (Test-Path $sourceDir) {
            Compress-Archive -Path "$sourceDir/*" -DestinationPath "dist/$zipName" -Force
          }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output-name }}-${{ github.event.inputs.version || '5.4.5' }}
          path: dist/${{ matrix.output-name }}-${{ github.event.inputs.version || '5.4.5' }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-manual:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          files: artifacts/**/*.zip
          generate_release_notes: true
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
